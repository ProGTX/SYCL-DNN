/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_bias_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/bias/bias_fixture.h"

#include <array>
#include <vector>

using namespace sycldnn;  // NOLINT(google-build-using-namespace)
using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using Bias = BiasFixture<typename Pair::FirstType, typename Pair::SecondType>;
TYPED_TEST_SUITE(Bias, GTestTypePairs);
TYPED_TEST(Bias, 1x1x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 6., 8.};
  const std::array<int, 4> in_shape = {{1, 1, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3.};
  const std::array<int, 4> in_shape = {{1, 1, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6.};
  const std::array<int, 4> in_shape = {{1, 1, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 6., 8., 6., 8., 10., 12.};
  const std::array<int, 4> in_shape = {{1, 1, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5.};
  const std::array<int, 4> in_shape = {{1, 1, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6., 6., 8., 8., 10.};
  const std::array<int, 4> in_shape = {{1, 1, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x1x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 6., 8., 6., 8., 10., 12., 10., 12., 14., 16., 14., 16., 18., 20.};
  const std::array<int, 4> in_shape = {{1, 1, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3.};
  const std::array<int, 4> in_shape = {{1, 2, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6.};
  const std::array<int, 4> in_shape = {{1, 2, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 6., 8., 6., 8., 10., 12.};
  const std::array<int, 4> in_shape = {{1, 2, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5.};
  const std::array<int, 4> in_shape = {{1, 2, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6., 6., 8., 8., 10.};
  const std::array<int, 4> in_shape = {{1, 2, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 6., 8., 6., 8., 10., 12., 10., 12., 14., 16., 14., 16., 18., 20.};
  const std::array<int, 4> in_shape = {{1, 2, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5., 6., 7., 8., 9.};
  const std::array<int, 4> in_shape = {{1, 2, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 4., 6., 6., 8., 8., 10., 10., 12., 12., 14., 14., 16., 16., 18.};
  const std::array<int, 4> in_shape = {{1, 2, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x2x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14.,
      16., 14., 16., 18., 20., 18., 20., 22., 24., 22., 24.,
      26., 28., 26., 28., 30., 32., 30., 32., 34., 36.};
  const std::array<int, 4> in_shape = {{1, 2, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5.};
  const std::array<int, 4> in_shape = {{1, 4, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6., 6., 8., 8., 10.};
  const std::array<int, 4> in_shape = {{1, 4, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 6., 8., 6., 8., 10., 12., 10., 12., 14., 16., 14., 16., 18., 20.};
  const std::array<int, 4> in_shape = {{1, 4, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5., 6., 7., 8., 9.};
  const std::array<int, 4> in_shape = {{1, 4, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 4., 6., 6., 8., 8., 10., 10., 12., 12., 14., 14., 16., 16., 18.};
  const std::array<int, 4> in_shape = {{1, 4, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14.,
      16., 14., 16., 18., 20., 18., 20., 22., 24., 22., 24.,
      26., 28., 26., 28., 30., 32., 30., 32., 34., 36.};
  const std::array<int, 4> in_shape = {{1, 4, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12.,
      14., 14., 16., 16., 18., 18., 20., 20., 22., 22., 24.,
      24., 26., 26., 28., 28., 30., 30., 32., 32., 34.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 1x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14., 16., 14.,
      16., 18., 20., 18., 20., 22., 24., 22., 24., 26., 28., 26., 28.,
      30., 32., 30., 32., 34., 36., 34., 36., 38., 40., 38., 40., 42.,
      44., 42., 44., 46., 48., 46., 48., 50., 52., 50., 52., 54., 56.,
      54., 56., 58., 60., 58., 60., 62., 64., 62., 64., 66., 68.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3.};
  const std::array<int, 4> in_shape = {{2, 1, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6.};
  const std::array<int, 4> in_shape = {{2, 1, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 6., 8., 6., 8., 10., 12.};
  const std::array<int, 4> in_shape = {{2, 1, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5.};
  const std::array<int, 4> in_shape = {{2, 1, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6., 6., 8., 8., 10.};
  const std::array<int, 4> in_shape = {{2, 1, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 6., 8., 6., 8., 10., 12., 10., 12., 14., 16., 14., 16., 18., 20.};
  const std::array<int, 4> in_shape = {{2, 1, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5., 6., 7., 8., 9.};
  const std::array<int, 4> in_shape = {{2, 1, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 4., 6., 6., 8., 8., 10., 10., 12., 12., 14., 14., 16., 16., 18.};
  const std::array<int, 4> in_shape = {{2, 1, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x1x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14.,
      16., 14., 16., 18., 20., 18., 20., 22., 24., 22., 24.,
      26., 28., 26., 28., 30., 32., 30., 32., 34., 36.};
  const std::array<int, 4> in_shape = {{2, 1, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5.};
  const std::array<int, 4> in_shape = {{2, 2, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6., 6., 8., 8., 10.};
  const std::array<int, 4> in_shape = {{2, 2, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 6., 8., 6., 8., 10., 12., 10., 12., 14., 16., 14., 16., 18., 20.};
  const std::array<int, 4> in_shape = {{2, 2, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5., 6., 7., 8., 9.};
  const std::array<int, 4> in_shape = {{2, 2, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 4., 6., 6., 8., 8., 10., 10., 12., 12., 14., 14., 16., 16., 18.};
  const std::array<int, 4> in_shape = {{2, 2, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14.,
      16., 14., 16., 18., 20., 18., 20., 22., 24., 22., 24.,
      26., 28., 26., 28., 30., 32., 30., 32., 34., 36.};
  const std::array<int, 4> in_shape = {{2, 2, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17.};
  const std::array<int, 4> in_shape = {{2, 2, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12.,
      14., 14., 16., 16., 18., 18., 20., 20., 22., 22., 24.,
      24., 26., 26., 28., 28., 30., 30., 32., 32., 34.};
  const std::array<int, 4> in_shape = {{2, 2, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x2x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14., 16., 14.,
      16., 18., 20., 18., 20., 22., 24., 22., 24., 26., 28., 26., 28.,
      30., 32., 30., 32., 34., 36., 34., 36., 38., 40., 38., 40., 42.,
      44., 42., 44., 46., 48., 46., 48., 50., 52., 50., 52., 54., 56.,
      54., 56., 58., 60., 58., 60., 62., 64., 62., 64., 66., 68.};
  const std::array<int, 4> in_shape = {{2, 2, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5., 6., 7., 8., 9.};
  const std::array<int, 4> in_shape = {{2, 4, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 4., 6., 6., 8., 8., 10., 10., 12., 12., 14., 14., 16., 16., 18.};
  const std::array<int, 4> in_shape = {{2, 4, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14.,
      16., 14., 16., 18., 20., 18., 20., 22., 24., 22., 24.,
      26., 28., 26., 28., 30., 32., 30., 32., 34., 36.};
  const std::array<int, 4> in_shape = {{2, 4, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17.};
  const std::array<int, 4> in_shape = {{2, 4, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12.,
      14., 14., 16., 16., 18., 18., 20., 20., 22., 22., 24.,
      24., 26., 26., 28., 28., 30., 30., 32., 32., 34.};
  const std::array<int, 4> in_shape = {{2, 4, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14., 16., 14.,
      16., 18., 20., 18., 20., 22., 24., 22., 24., 26., 28., 26., 28.,
      30., 32., 30., 32., 34., 36., 34., 36., 38., 40., 38., 40., 42.,
      44., 42., 44., 46., 48., 46., 48., 50., 52., 50., 52., 54., 56.,
      54., 56., 58., 60., 58., 60., 62., 64., 62., 64., 66., 68.};
  const std::array<int, 4> in_shape = {{2, 4, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12.,
      13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23.,
      24., 25., 26., 27., 28., 29., 30., 31., 32., 33.};
  const std::array<int, 4> in_shape = {{2, 4, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12., 14., 14.,
      16., 16., 18., 18., 20., 20., 22., 22., 24., 24., 26., 26., 28.,
      28., 30., 30., 32., 32., 34., 34., 36., 36., 38., 38., 40., 40.,
      42., 42., 44., 44., 46., 46., 48., 48., 50., 50., 52., 52., 54.,
      54., 56., 56., 58., 58., 60., 60., 62., 62., 64., 64., 66.};
  const std::array<int, 4> in_shape = {{2, 4, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 2x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,   4.,   6.,   8.,   6.,   8.,   10.,  12.,  10.,  12.,  14.,  16.,
      14.,  16.,  18.,  20.,  18.,  20.,  22.,  24.,  22.,  24.,  26.,  28.,
      26.,  28.,  30.,  32.,  30.,  32.,  34.,  36.,  34.,  36.,  38.,  40.,
      38.,  40.,  42.,  44.,  42.,  44.,  46.,  48.,  46.,  48.,  50.,  52.,
      50.,  52.,  54.,  56.,  54.,  56.,  58.,  60.,  58.,  60.,  62.,  64.,
      62.,  64.,  66.,  68.,  66.,  68.,  70.,  72.,  70.,  72.,  74.,  76.,
      74.,  76.,  78.,  80.,  78.,  80.,  82.,  84.,  82.,  84.,  86.,  88.,
      86.,  88.,  90.,  92.,  90.,  92.,  94.,  96.,  94.,  96.,  98.,  100.,
      98.,  100., 102., 104., 102., 104., 106., 108., 106., 108., 110., 112.,
      110., 112., 114., 116., 114., 116., 118., 120., 118., 120., 122., 124.,
      122., 124., 126., 128., 126., 128., 130., 132.};
  const std::array<int, 4> in_shape = {{2, 4, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5.};
  const std::array<int, 4> in_shape = {{4, 1, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 4., 4., 6., 6., 8., 8., 10.};
  const std::array<int, 4> in_shape = {{4, 1, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 6., 8., 6., 8., 10., 12., 10., 12., 14., 16., 14., 16., 18., 20.};
  const std::array<int, 4> in_shape = {{4, 1, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5., 6., 7., 8., 9.};
  const std::array<int, 4> in_shape = {{4, 1, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 4., 6., 6., 8., 8., 10., 10., 12., 12., 14., 14., 16., 16., 18.};
  const std::array<int, 4> in_shape = {{4, 1, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14.,
      16., 14., 16., 18., 20., 18., 20., 22., 24., 22., 24.,
      26., 28., 26., 28., 30., 32., 30., 32., 34., 36.};
  const std::array<int, 4> in_shape = {{4, 1, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17.};
  const std::array<int, 4> in_shape = {{4, 1, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12.,
      14., 14., 16., 16., 18., 18., 20., 20., 22., 22., 24.,
      24., 26., 26., 28., 28., 30., 30., 32., 32., 34.};
  const std::array<int, 4> in_shape = {{4, 1, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x1x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14., 16., 14.,
      16., 18., 20., 18., 20., 22., 24., 22., 24., 26., 28., 26., 28.,
      30., 32., 30., 32., 34., 36., 34., 36., 38., 40., 38., 40., 42.,
      44., 42., 44., 46., 48., 46., 48., 50., 52., 50., 52., 54., 56.,
      54., 56., 58., 60., 58., 60., 62., 64., 62., 64., 66., 68.};
  const std::array<int, 4> in_shape = {{4, 1, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {2., 3., 4., 5., 6., 7., 8., 9.};
  const std::array<int, 4> in_shape = {{4, 2, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 4., 4., 6., 6., 8., 8., 10., 10., 12., 12., 14., 14., 16., 16., 18.};
  const std::array<int, 4> in_shape = {{4, 2, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14.,
      16., 14., 16., 18., 20., 18., 20., 22., 24., 22., 24.,
      26., 28., 26., 28., 30., 32., 30., 32., 34., 36.};
  const std::array<int, 4> in_shape = {{4, 2, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17.};
  const std::array<int, 4> in_shape = {{4, 2, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12.,
      14., 14., 16., 16., 18., 18., 20., 20., 22., 22., 24.,
      24., 26., 26., 28., 28., 30., 30., 32., 32., 34.};
  const std::array<int, 4> in_shape = {{4, 2, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14., 16., 14.,
      16., 18., 20., 18., 20., 22., 24., 22., 24., 26., 28., 26., 28.,
      30., 32., 30., 32., 34., 36., 34., 36., 38., 40., 38., 40., 42.,
      44., 42., 44., 46., 48., 46., 48., 50., 52., 50., 52., 54., 56.,
      54., 56., 58., 60., 58., 60., 62., 64., 62., 64., 66., 68.};
  const std::array<int, 4> in_shape = {{4, 2, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12.,
      13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23.,
      24., 25., 26., 27., 28., 29., 30., 31., 32., 33.};
  const std::array<int, 4> in_shape = {{4, 2, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12., 14., 14.,
      16., 16., 18., 18., 20., 20., 22., 22., 24., 24., 26., 26., 28.,
      28., 30., 30., 32., 32., 34., 34., 36., 36., 38., 38., 40., 40.,
      42., 42., 44., 44., 46., 46., 48., 48., 50., 50., 52., 52., 54.,
      54., 56., 56., 58., 58., 60., 60., 62., 62., 64., 64., 66.};
  const std::array<int, 4> in_shape = {{4, 2, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x2x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,   4.,   6.,   8.,   6.,   8.,   10.,  12.,  10.,  12.,  14.,  16.,
      14.,  16.,  18.,  20.,  18.,  20.,  22.,  24.,  22.,  24.,  26.,  28.,
      26.,  28.,  30.,  32.,  30.,  32.,  34.,  36.,  34.,  36.,  38.,  40.,
      38.,  40.,  42.,  44.,  42.,  44.,  46.,  48.,  46.,  48.,  50.,  52.,
      50.,  52.,  54.,  56.,  54.,  56.,  58.,  60.,  58.,  60.,  62.,  64.,
      62.,  64.,  66.,  68.,  66.,  68.,  70.,  72.,  70.,  72.,  74.,  76.,
      74.,  76.,  78.,  80.,  78.,  80.,  82.,  84.,  82.,  84.,  86.,  88.,
      86.,  88.,  90.,  92.,  90.,  92.,  94.,  96.,  94.,  96.,  98.,  100.,
      98.,  100., 102., 104., 102., 104., 106., 108., 106., 108., 110., 112.,
      110., 112., 114., 116., 114., 116., 118., 120., 118., 120., 122., 124.,
      122., 124., 126., 128., 126., 128., 130., 132.};
  const std::array<int, 4> in_shape = {{4, 2, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2., 3., 4., 5., 6., 7., 8., 9., 10., 11., 12., 13., 14., 15., 16., 17.};
  const std::array<int, 4> in_shape = {{4, 4, 1, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12.,
      14., 14., 16., 16., 18., 18., 20., 20., 22., 22., 24.,
      24., 26., 26., 28., 28., 30., 30., 32., 32., 34.};
  const std::array<int, 4> in_shape = {{4, 4, 1, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  6.,  8.,  6.,  8.,  10., 12., 10., 12., 14., 16., 14.,
      16., 18., 20., 18., 20., 22., 24., 22., 24., 26., 28., 26., 28.,
      30., 32., 30., 32., 34., 36., 34., 36., 38., 40., 38., 40., 42.,
      44., 42., 44., 46., 48., 46., 48., 50., 52., 50., 52., 54., 56.,
      54., 56., 58., 60., 58., 60., 62., 64., 62., 64., 66., 68.};
  const std::array<int, 4> in_shape = {{4, 4, 1, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12.,
      13., 14., 15., 16., 17., 18., 19., 20., 21., 22., 23.,
      24., 25., 26., 27., 28., 29., 30., 31., 32., 33.};
  const std::array<int, 4> in_shape = {{4, 4, 2, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  4.,  4.,  6.,  6.,  8.,  8.,  10., 10., 12., 12., 14., 14.,
      16., 16., 18., 18., 20., 20., 22., 22., 24., 24., 26., 26., 28.,
      28., 30., 30., 32., 32., 34., 34., 36., 36., 38., 38., 40., 40.,
      42., 42., 44., 44., 46., 46., 48., 48., 50., 50., 52., 52., 54.,
      54., 56., 56., 58., 58., 60., 60., 62., 62., 64., 64., 66.};
  const std::array<int, 4> in_shape = {{4, 4, 2, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,   4.,   6.,   8.,   6.,   8.,   10.,  12.,  10.,  12.,  14.,  16.,
      14.,  16.,  18.,  20.,  18.,  20.,  22.,  24.,  22.,  24.,  26.,  28.,
      26.,  28.,  30.,  32.,  30.,  32.,  34.,  36.,  34.,  36.,  38.,  40.,
      38.,  40.,  42.,  44.,  42.,  44.,  46.,  48.,  46.,  48.,  50.,  52.,
      50.,  52.,  54.,  56.,  54.,  56.,  58.,  60.,  58.,  60.,  62.,  64.,
      62.,  64.,  66.,  68.,  66.,  68.,  70.,  72.,  70.,  72.,  74.,  76.,
      74.,  76.,  78.,  80.,  78.,  80.,  82.,  84.,  82.,  84.,  86.,  88.,
      86.,  88.,  90.,  92.,  90.,  92.,  94.,  96.,  94.,  96.,  98.,  100.,
      98.,  100., 102., 104., 102., 104., 106., 108., 106., 108., 110., 112.,
      110., 112., 114., 116., 114., 116., 118., 120., 118., 120., 122., 124.,
      122., 124., 126., 128., 126., 128., 130., 132.};
  const std::array<int, 4> in_shape = {{4, 4, 2, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12., 13., 14.,
      15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,
      28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38., 39., 40.,
      41., 42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53.,
      54., 55., 56., 57., 58., 59., 60., 61., 62., 63., 64., 65.};
  const std::array<int, 4> in_shape = {{4, 4, 4, 1}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,   4.,   4.,   6.,   6.,   8.,   8.,   10.,  10.,  12.,  12.,  14.,
      14.,  16.,  16.,  18.,  18.,  20.,  20.,  22.,  22.,  24.,  24.,  26.,
      26.,  28.,  28.,  30.,  30.,  32.,  32.,  34.,  34.,  36.,  36.,  38.,
      38.,  40.,  40.,  42.,  42.,  44.,  44.,  46.,  46.,  48.,  48.,  50.,
      50.,  52.,  52.,  54.,  54.,  56.,  56.,  58.,  58.,  60.,  60.,  62.,
      62.,  64.,  64.,  66.,  66.,  68.,  68.,  70.,  70.,  72.,  72.,  74.,
      74.,  76.,  76.,  78.,  78.,  80.,  80.,  82.,  82.,  84.,  84.,  86.,
      86.,  88.,  88.,  90.,  90.,  92.,  92.,  94.,  94.,  96.,  96.,  98.,
      98.,  100., 100., 102., 102., 104., 104., 106., 106., 108., 108., 110.,
      110., 112., 112., 114., 114., 116., 116., 118., 118., 120., 120., 122.,
      122., 124., 124., 126., 126., 128., 128., 130.};
  const std::array<int, 4> in_shape = {{4, 4, 4, 2}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
TYPED_TEST(Bias, 4x4x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2.,   4.,   6.,   8.,   6.,   8.,   10.,  12.,  10.,  12.,  14.,  16.,
      14.,  16.,  18.,  20.,  18.,  20.,  22.,  24.,  22.,  24.,  26.,  28.,
      26.,  28.,  30.,  32.,  30.,  32.,  34.,  36.,  34.,  36.,  38.,  40.,
      38.,  40.,  42.,  44.,  42.,  44.,  46.,  48.,  46.,  48.,  50.,  52.,
      50.,  52.,  54.,  56.,  54.,  56.,  58.,  60.,  58.,  60.,  62.,  64.,
      62.,  64.,  66.,  68.,  66.,  68.,  70.,  72.,  70.,  72.,  74.,  76.,
      74.,  76.,  78.,  80.,  78.,  80.,  82.,  84.,  82.,  84.,  86.,  88.,
      86.,  88.,  90.,  92.,  90.,  92.,  94.,  96.,  94.,  96.,  98.,  100.,
      98.,  100., 102., 104., 102., 104., 106., 108., 106., 108., 110., 112.,
      110., 112., 114., 116., 114., 116., 118., 120., 118., 120., 122., 124.,
      122., 124., 126., 128., 126., 128., 130., 132., 130., 132., 134., 136.,
      134., 136., 138., 140., 138., 140., 142., 144., 142., 144., 146., 148.,
      146., 148., 150., 152., 150., 152., 154., 156., 154., 156., 158., 160.,
      158., 160., 162., 164., 162., 164., 166., 168., 166., 168., 170., 172.,
      170., 172., 174., 176., 174., 176., 178., 180., 178., 180., 182., 184.,
      182., 184., 186., 188., 186., 188., 190., 192., 190., 192., 194., 196.,
      194., 196., 198., 200., 198., 200., 202., 204., 202., 204., 206., 208.,
      206., 208., 210., 212., 210., 212., 214., 216., 214., 216., 218., 220.,
      218., 220., 222., 224., 222., 224., 226., 228., 226., 228., 230., 232.,
      230., 232., 234., 236., 234., 236., 238., 240., 238., 240., 242., 244.,
      242., 244., 246., 248., 246., 248., 250., 252., 250., 252., 254., 256.,
      254., 256., 258., 260.};
  const std::array<int, 4> in_shape = {{4, 4, 4, 4}};
  const auto params = getBiasParams(in_shape);
  const DataType max_input_val = 2048.0;
  this->test_bias(exp_out, params, max_input_val);
}
