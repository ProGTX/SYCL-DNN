/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_transpose_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>
#include <vector>

#include "test/transpose/transpose_event_dependencies_fixture.h"
#include "test/types/kernel_data_types.h"
#include "test/types/to_gtest_types.h"

using GTestTypeList = sycldnn::types::GTestKernelDataTypes;

template <typename params>
using TransposeEvent = TransposeEventFixture<params>;
TYPED_TEST_SUITE(TransposeEvent, GTestTypeList);
TYPED_TEST(TransposeEvent, T2D_ED_4x4_1x0) {
  using DataType = typename TestFixture::DataType;
  const std::vector<int> sizes = {4, 4};
  const std::vector<int> perm = {1, 0};
  const DataType max_input_val = 2048.0;
  this->run(sizes, perm, max_input_val, launch);
}
TYPED_TEST(TransposeEvent, T2D_ED_2x2_0x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<int> sizes = {2, 2};
  const std::vector<int> perm = {0, 1};
  const DataType max_input_val = 2048.0;
  this->run(sizes, perm, max_input_val, launch);
}
TYPED_TEST(TransposeEvent, T3D_ED_2x2x2_0x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<int> sizes = {2, 2, 2};
  const std::vector<int> perm = {0, 1, 2};
  const DataType max_input_val = 2048.0;
  this->run(sizes, perm, max_input_val, launch);
}
TYPED_TEST(TransposeEvent, T3D_ED_2x2x2_0x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<int> sizes = {2, 2, 2};
  const std::vector<int> perm = {0, 2, 1};
  const DataType max_input_val = 2048.0;
  this->run(sizes, perm, max_input_val, launch);
}
TYPED_TEST(TransposeEvent, T4D_ED_2x2x2x2_0x1x2x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<int> sizes = {2, 2, 2, 2};
  const std::vector<int> perm = {0, 1, 2, 3};
  const DataType max_input_val = 2048.0;
  this->run(sizes, perm, max_input_val, launch);
}
TYPED_TEST(TransposeEvent, T4D_ED_2x2x2x2_0x1x3x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<int> sizes = {2, 3, 4, 5};
  const std::vector<int> perm = {0, 1, 3, 2};
  const DataType max_input_val = 2048.0;
  this->run(sizes, perm, max_input_val, launch);
}
TYPED_TEST(TransposeEvent, NHWC_TO_NCHW_ED) {
  using DataType = typename TestFixture::DataType;
  const std::vector<int> sizes = {2, 3, 4, 5};
  const std::vector<int> perm = {0, 3, 1, 2};
  const DataType max_input_val = 2048.0;
  this->run(sizes, perm, max_input_val, nhwc_to_nchw);
}